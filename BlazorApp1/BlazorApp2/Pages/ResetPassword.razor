@page "/ResetPass"
@using BlazorApp2.Authentication
@using System.Security.Cryptography
@using System.Text


@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authhStateProvider;
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime


<h3>Reset Password</h3>


    <div>
        <p>Welcome, Please enter your new password.</p>
        <input type="password" @bind="newPassword" />
        <button @onclick="Reset">Reset Password</button>
    </div>










@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }


    private Model model;
    private string newPassword; // Add this
    private string username;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authhStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Name")?.Value;
            // Use the retrieved username as needed
        }

        if (!string.IsNullOrEmpty(username))
        {
            model = new Model
                {
                    UserName = username
                };
        }
        else
        {
            // Handle the case where the username is not found in the session storage
        }
    }





    private async Task Reset()
    {
        if (!string.IsNullOrEmpty(newPassword))
        {
           

            
               
            

            // Update the user's password in the database
            var userAccount = userAccountService.GetUserByUserName(model.UserName);
            string hashedPassword = newPassword;
            for (int i = 0; i < (userAccount?.n ?? 10); i++)
            {
                hashedPassword = HashPassword(hashedPassword);
            }
            if (userAccount != null)
            {
                userAccount.Password = hashedPassword;
                userAccount.n = 1; // Set n to 1
                userAccountService.UpdateUserDetail(userAccount);
            }

            // Redirect the user to the home page after resetting the password
            navManager.NavigateTo("/", true);
        }
    }


    private string HashPassword(string password)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(password));
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}
