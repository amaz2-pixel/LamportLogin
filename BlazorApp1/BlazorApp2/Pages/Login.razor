@page "/login"
@using BlazorApp2.Authentication
@using System.Security.Cryptography
@using System.Text

@inject UserAccountService userAccountService;
@inject IJSRuntime js;
@inject AuthenticationStateProvider authhStateProvider;
@inject NavigationManager navManager;

<section class="vh-100 ">
   <div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-12 col-md-8 col-lg-6 col-xl-5">
        <div class="card bg-dark text-white" style="border-radius: 1rem;">
          <div class="card-body p-5 text-center">

            <div class="mb-md-5 mt-md-4 pb-5">

              <h2 class="fw-bold mb-2 text-uppercase">Login</h2>
              <p class="text-white-50 mb-5">Please enter your Username and password!</p>

              <div class="form-outline form-white mb-4">
                <label class="form-label" for="typeEmailX">Username</label>
                <input type="text" @bind="model.UserName" id="typeEmailX" class="form-control form-control-lg" />
                
              </div>

              <div class="form-outline form-white mb-4">
                <label class="form-label" for="typePasswordX">Password</label>
                <input type="password" @bind="model.Password" id="typePasswordX" class="form-control form-control-lg" />
               
              </div>

             

              <button @onclick="Authenticate" class="btn btn-outline-light btn-lg px-5" type="submit">Login</button>

           

            </div>

            

          </div>
        </div>
      </div>
    </div>
  </div>
</section>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetUserByUserName(model.UserName);
        if (userAccount == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid UserName");
            return;
        }

        // Hash the input password for comparison
        using (SHA256 sha256Hash = SHA256.Create())
        {
            string hashedPassword = GetHash(sha256Hash, model.Password);
            if (userAccount.Password == null || userAccount.Password != hashedPassword)
            {
                await js.InvokeVoidAsync("alert", $"Invalid Password, your challenge is {userAccount.n} ");
                return;
            }
        }
        var authStateProvider = (Lamport)authhStateProvider;
        await authStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        if (userAccount.n <= 1)
        {
            navManager.NavigateTo("/ResetPass", true);
            return;
        }
        // Increment the n value
       


  
        await js.InvokeVoidAsync("alert", "Successfully Logged In");
        userAccount.n--;
            userAccount.Password = model.Password;
      

        // Update the user account
        userAccountService.UpdateUserDetail(userAccount);

    
        navManager.NavigateTo("/", true);
    }

    private string GetHash(HashAlgorithm hashAlgorithm, string input)
    {
        byte[] data = hashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(input));

        StringBuilder sBuilder = new StringBuilder();

        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        return sBuilder.ToString();
    }
}

